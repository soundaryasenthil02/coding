/*
Given an array of size n, find the majority element. The majority element is the element that appears more than floor(n/2) times.
You may assume that the array is non-empty and the majority element always exist in the array.
Example :
Input : [2, 1, 2]
Return  : 2 which occurs 2 times which is greater than 3/2. 
https://www.interviewbit.com/problems/majority-element/
*/

int Solution::majorityElement(const vector<int> &A) {
    // Mooreâ€™s Voting Algorithm
    int majorityIndex = 0;
    for (int count = 1, i = 1; i<A.size(); ++i)
    {
        A[majorityIndex] == A[i] ? ++count : --count;
        if (count == 0)
        {
            majorityIndex = i;
            count = 1;
        }
    }
    return A[majorityIndex];

def findMajority(arr, size): 
    m = {} 
    for i in range(size): 
        if arr[i] in m: 
            m[arr[i]] += 1
        else: 
            m[arr[i]] = 1
    count = 0
    for key in m: 
        if m[key] > size / 2: 
            count = 1
            print("Majority found :-",key) 
            break
    if(count == 0): 
        print("No Majority element") 
  
# Driver code  
arr = [2, 2, 2, 2, 5, 5, 2, 3, 3]  
n = len(arr) 
  
# Function calling  
findMajority(arr, n) 
